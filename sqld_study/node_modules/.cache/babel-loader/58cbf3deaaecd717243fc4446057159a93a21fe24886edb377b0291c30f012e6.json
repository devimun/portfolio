{"ast":null,"code":"var _jsxFileName = \"/Users/jun/Desktop/sqld_study/src/components/quiz/Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  width: 100%;\n  height: calc(100vh - 140px); /* 헤더와 패딩을 고려한 높이 */\n  overflow: hidden;\n`;\n_c = QuizContainer;\nconst CategoryText = styled.p`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 600;\n  font-size: 18px;\n  color: #2395e9;\n  text-align: center;\n  margin-bottom: 10px;\n`;\n_c2 = CategoryText;\nconst QuestionCard = styled.div`\n  background-color: #121c2b;\n  border-radius: 22px;\n  padding: 40px 50px;\n  width: 100%;\n  max-width: 800px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n`;\n_c3 = QuestionCard;\nconst QuestionText = styled.p`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 500;\n  font-size: 15px;\n  color: #d7dfe5;\n  line-height: 1.33;\n  max-width: 600px;\n`;\n_c4 = QuestionText;\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 0;\n  width: 100%;\n  max-width: 600px;\n`;\n_c5 = ButtonGroup;\nconst AnswerButton = styled.button`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 500;\n  font-size: 15px;\n  color: #d7dfe5;\n  padding: 8px 16px;\n  background-color: transparent;\n  border: 1.5px solid rgba(214, 224, 230, 0.2);\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: rgba(35, 149, 233, 0.4);\n  }\n\n  &.selected {\n    background-color: rgba(35, 149, 233, 0.7);\n  }\n\n  &.correct {\n    background-color: rgba(46, 204, 113, 0.7);\n  }\n\n  &.incorrect {\n    background-color: rgba(231, 76, 60, 0.7);\n  }\n`;\n_c6 = AnswerButton;\nconst SkipButton = styled.button`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 500;\n  font-size: 15px;\n  color: #fafdff;\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 8px 16px;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n_c7 = SkipButton;\nconst NextButton = styled.button`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 500;\n  font-size: 15px;\n  color: #000000;\n  background-color: #2395e9;\n  border: none;\n  border-radius: 22px;\n  padding: 8px 16px;\n  cursor: pointer;\n  margin-top: 12px;\n\n  &:hover {\n    background-color: #1b7ac2;\n  }\n`;\n_c8 = NextButton;\nconst ResultContainer = styled.div`\n  background-color: #121c2b;\n  border-radius: 22px;\n  padding: 30px;\n  width: 100%;\n  max-width: 800px;\n  margin-top: 20px;\n`;\n_c9 = ResultContainer;\nconst ResultText = styled.p`\n  font-family: \"IBM Plex Sans\", sans-serif;\n  font-size: 16px;\n  line-height: 1.5;\n  color: #d7dfe5;\n  margin-bottom: 10px;\n`;\n_c0 = ResultText;\nconst ExplanationText = styled.p`\n  font-family: \"IBM Plex Sans\", sans-serif;\n  font-size: 15px;\n  line-height: 1.5;\n  color: #a7b7c2;\n  font-style: italic;\n  padding-left: 16px;\n  border-left: 3px solid #2395e9;\n  margin-top: 16px;\n`;\n_c1 = ExplanationText;\nconst Quiz = ({\n  quizData,\n  onComplete\n}) => {\n  _s();\n  const [availableQuestions, setAvailableQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  const [score, setScore] = useState(0);\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState(Array(quizData.length).fill(null));\n\n  // 초기 랜덤 문제 목록 생성\n  useEffect(() => {\n    const shuffleQuestions = () => {\n      // 문제 인덱스를 배열로 만들고 섞기\n      const indices = [...Array(quizData.length).keys()];\n      for (let i = indices.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [indices[i], indices[j]] = [indices[j], indices[i]];\n      }\n      setAvailableQuestions(indices);\n    };\n    shuffleQuestions();\n  }, [quizData.length]);\n  const getCurrentQuestion = () => {\n    if (availableQuestions.length === 0) return null;\n    const questionId = availableQuestions[currentQuestionIndex];\n    return quizData[questionId];\n  };\n  const handleAnswerClick = answer => {\n    if (showResult) return;\n    const currentQuestion = getCurrentQuestion();\n    if (!currentQuestion) return;\n    const questionId = availableQuestions[currentQuestionIndex];\n    setSelectedAnswer(answer);\n    setShowResult(true);\n    const newUserAnswers = [...userAnswers];\n    newUserAnswers[questionId] = answer;\n    setUserAnswers(newUserAnswers);\n    if (answer === currentQuestion.correctAnswer) {\n      setScore(score + 1);\n    }\n    setAnsweredQuestions([...answeredQuestions, questionId]);\n  };\n  const handleNextClick = () => {\n    setShowResult(false);\n    setSelectedAnswer(null);\n\n    // 현재 문제를 사용 가능한 문제 목록에서 제거\n    const updatedQuestions = [...availableQuestions];\n    updatedQuestions.splice(currentQuestionIndex, 1);\n    setAvailableQuestions(updatedQuestions);\n\n    // 다음 문제 인덱스 설정 (랜덤)\n    if (updatedQuestions.length > 0) {\n      const nextIndex = Math.floor(Math.random() * updatedQuestions.length);\n      setCurrentQuestionIndex(nextIndex);\n    } else {\n      // 모든 문제를 다 풀었을 때\n      onComplete(score, userAnswers);\n    }\n  };\n  const handleSkipClick = () => {\n    if (availableQuestions.length <= 1) return;\n\n    // 현재 문제를 건너뛰고 다른 랜덤 문제 선택\n    let nextIndex;\n    do {\n      nextIndex = Math.floor(Math.random() * availableQuestions.length);\n    } while (nextIndex === currentQuestionIndex && availableQuestions.length > 1);\n    setCurrentQuestionIndex(nextIndex);\n    setShowResult(false);\n    setSelectedAnswer(null);\n  };\n  const currentQuestion = getCurrentQuestion();\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(QuizContainer, {\n      children: /*#__PURE__*/_jsxDEV(NextButton, {\n        onClick: () => onComplete(score, userAnswers),\n        children: \"\\uACB0\\uACFC \\uBCF4\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(QuizContainer, {\n    children: [/*#__PURE__*/_jsxDEV(CategoryText, {\n      children: [\"\\uC8FC\\uC81C: \", currentQuestion.category]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionCard, {\n      children: /*#__PURE__*/_jsxDEV(QuestionText, {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      children: [/*#__PURE__*/_jsxDEV(AnswerButton, {\n        className: showResult ? currentQuestion.correctAnswer === \"O\" ? \"correct\" : selectedAnswer === \"O\" ? \"incorrect\" : \"\" : selectedAnswer === \"O\" ? \"selected\" : \"\",\n        onClick: () => handleAnswerClick(\"O\"),\n        children: \"O\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnswerButton, {\n        className: showResult ? currentQuestion.correctAnswer === \"X\" ? \"correct\" : selectedAnswer === \"X\" ? \"incorrect\" : \"\" : selectedAnswer === \"X\" ? \"selected\" : \"\",\n        onClick: () => handleAnswerClick(\"X\"),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), !showResult && availableQuestions.length > 1 && /*#__PURE__*/_jsxDEV(SkipButton, {\n      onClick: handleSkipClick,\n      children: \"Skip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this), showResult && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ResultContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ResultText, {\n          children: [\"\\uC815\\uB2F5: \", currentQuestion.correctAnswer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ExplanationText, {\n          children: currentQuestion.explanation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n        onClick: handleNextClick,\n        children: availableQuestions.length > 1 ? \"다음 문제\" : \"결과 보기\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"OmAro9e8twDCHpgezIuDmCsjzKg=\");\n_c10 = Quiz;\nexport default Quiz;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10;\n$RefreshReg$(_c, \"QuizContainer\");\n$RefreshReg$(_c2, \"CategoryText\");\n$RefreshReg$(_c3, \"QuestionCard\");\n$RefreshReg$(_c4, \"QuestionText\");\n$RefreshReg$(_c5, \"ButtonGroup\");\n$RefreshReg$(_c6, \"AnswerButton\");\n$RefreshReg$(_c7, \"SkipButton\");\n$RefreshReg$(_c8, \"NextButton\");\n$RefreshReg$(_c9, \"ResultContainer\");\n$RefreshReg$(_c0, \"ResultText\");\n$RefreshReg$(_c1, \"ExplanationText\");\n$RefreshReg$(_c10, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizContainer","div","_c","CategoryText","p","_c2","QuestionCard","_c3","QuestionText","_c4","ButtonGroup","_c5","AnswerButton","button","_c6","SkipButton","_c7","NextButton","_c8","ResultContainer","_c9","ResultText","_c0","ExplanationText","_c1","Quiz","quizData","onComplete","_s","availableQuestions","setAvailableQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","showResult","setShowResult","score","setScore","answeredQuestions","setAnsweredQuestions","userAnswers","setUserAnswers","Array","length","fill","shuffleQuestions","indices","keys","i","j","Math","floor","random","getCurrentQuestion","questionId","handleAnswerClick","answer","currentQuestion","newUserAnswers","correctAnswer","handleNextClick","updatedQuestions","splice","nextIndex","handleSkipClick","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","category","question","className","explanation","_c10","$RefreshReg$"],"sources":["/Users/jun/Desktop/sqld_study/src/components/quiz/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst QuizContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  width: 100%;\n  height: calc(100vh - 140px); /* 헤더와 패딩을 고려한 높이 */\n  overflow: hidden;\n`;\n\nconst CategoryText = styled.p`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 600;\n  font-size: 18px;\n  color: #2395e9;\n  text-align: center;\n  margin-bottom: 10px;\n`;\n\nconst QuestionCard = styled.div`\n  background-color: #121c2b;\n  border-radius: 22px;\n  padding: 40px 50px;\n  width: 100%;\n  max-width: 800px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n`;\n\nconst QuestionText = styled.p`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 500;\n  font-size: 15px;\n  color: #d7dfe5;\n  line-height: 1.33;\n  max-width: 600px;\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 0;\n  width: 100%;\n  max-width: 600px;\n`;\n\nconst AnswerButton = styled.button`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 500;\n  font-size: 15px;\n  color: #d7dfe5;\n  padding: 8px 16px;\n  background-color: transparent;\n  border: 1.5px solid rgba(214, 224, 230, 0.2);\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: rgba(35, 149, 233, 0.4);\n  }\n\n  &.selected {\n    background-color: rgba(35, 149, 233, 0.7);\n  }\n\n  &.correct {\n    background-color: rgba(46, 204, 113, 0.7);\n  }\n\n  &.incorrect {\n    background-color: rgba(231, 76, 60, 0.7);\n  }\n`;\n\nconst SkipButton = styled.button`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 500;\n  font-size: 15px;\n  color: #fafdff;\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 8px 16px;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst NextButton = styled.button`\n  font-family: \"Plus Jakarta Sans\", sans-serif;\n  font-weight: 500;\n  font-size: 15px;\n  color: #000000;\n  background-color: #2395e9;\n  border: none;\n  border-radius: 22px;\n  padding: 8px 16px;\n  cursor: pointer;\n  margin-top: 12px;\n\n  &:hover {\n    background-color: #1b7ac2;\n  }\n`;\n\nconst ResultContainer = styled.div`\n  background-color: #121c2b;\n  border-radius: 22px;\n  padding: 30px;\n  width: 100%;\n  max-width: 800px;\n  margin-top: 20px;\n`;\n\nconst ResultText = styled.p`\n  font-family: \"IBM Plex Sans\", sans-serif;\n  font-size: 16px;\n  line-height: 1.5;\n  color: #d7dfe5;\n  margin-bottom: 10px;\n`;\n\nconst ExplanationText = styled.p`\n  font-family: \"IBM Plex Sans\", sans-serif;\n  font-size: 15px;\n  line-height: 1.5;\n  color: #a7b7c2;\n  font-style: italic;\n  padding-left: 16px;\n  border-left: 3px solid #2395e9;\n  margin-top: 16px;\n`;\n\nconst Quiz = ({ quizData, onComplete }) => {\n  const [availableQuestions, setAvailableQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  const [score, setScore] = useState(0);\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState(\n    Array(quizData.length).fill(null)\n  );\n\n  // 초기 랜덤 문제 목록 생성\n  useEffect(() => {\n    const shuffleQuestions = () => {\n      // 문제 인덱스를 배열로 만들고 섞기\n      const indices = [...Array(quizData.length).keys()];\n      for (let i = indices.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [indices[i], indices[j]] = [indices[j], indices[i]];\n      }\n      setAvailableQuestions(indices);\n    };\n\n    shuffleQuestions();\n  }, [quizData.length]);\n\n  const getCurrentQuestion = () => {\n    if (availableQuestions.length === 0) return null;\n    const questionId = availableQuestions[currentQuestionIndex];\n    return quizData[questionId];\n  };\n\n  const handleAnswerClick = (answer) => {\n    if (showResult) return;\n\n    const currentQuestion = getCurrentQuestion();\n    if (!currentQuestion) return;\n\n    const questionId = availableQuestions[currentQuestionIndex];\n\n    setSelectedAnswer(answer);\n    setShowResult(true);\n\n    const newUserAnswers = [...userAnswers];\n    newUserAnswers[questionId] = answer;\n    setUserAnswers(newUserAnswers);\n\n    if (answer === currentQuestion.correctAnswer) {\n      setScore(score + 1);\n    }\n\n    setAnsweredQuestions([...answeredQuestions, questionId]);\n  };\n\n  const handleNextClick = () => {\n    setShowResult(false);\n    setSelectedAnswer(null);\n\n    // 현재 문제를 사용 가능한 문제 목록에서 제거\n    const updatedQuestions = [...availableQuestions];\n    updatedQuestions.splice(currentQuestionIndex, 1);\n    setAvailableQuestions(updatedQuestions);\n\n    // 다음 문제 인덱스 설정 (랜덤)\n    if (updatedQuestions.length > 0) {\n      const nextIndex = Math.floor(Math.random() * updatedQuestions.length);\n      setCurrentQuestionIndex(nextIndex);\n    } else {\n      // 모든 문제를 다 풀었을 때\n      onComplete(score, userAnswers);\n    }\n  };\n\n  const handleSkipClick = () => {\n    if (availableQuestions.length <= 1) return;\n\n    // 현재 문제를 건너뛰고 다른 랜덤 문제 선택\n    let nextIndex;\n    do {\n      nextIndex = Math.floor(Math.random() * availableQuestions.length);\n    } while (\n      nextIndex === currentQuestionIndex &&\n      availableQuestions.length > 1\n    );\n\n    setCurrentQuestionIndex(nextIndex);\n    setShowResult(false);\n    setSelectedAnswer(null);\n  };\n\n  const currentQuestion = getCurrentQuestion();\n  if (!currentQuestion) {\n    return (\n      <QuizContainer>\n        <NextButton onClick={() => onComplete(score, userAnswers)}>\n          결과 보기\n        </NextButton>\n      </QuizContainer>\n    );\n  }\n\n  return (\n    <QuizContainer>\n      <CategoryText>주제: {currentQuestion.category}</CategoryText>\n\n      <QuestionCard>\n        <QuestionText>{currentQuestion.question}</QuestionText>\n      </QuestionCard>\n\n      <ButtonGroup>\n        <AnswerButton\n          className={\n            showResult\n              ? currentQuestion.correctAnswer === \"O\"\n                ? \"correct\"\n                : selectedAnswer === \"O\"\n                ? \"incorrect\"\n                : \"\"\n              : selectedAnswer === \"O\"\n              ? \"selected\"\n              : \"\"\n          }\n          onClick={() => handleAnswerClick(\"O\")}\n        >\n          O\n        </AnswerButton>\n\n        <AnswerButton\n          className={\n            showResult\n              ? currentQuestion.correctAnswer === \"X\"\n                ? \"correct\"\n                : selectedAnswer === \"X\"\n                ? \"incorrect\"\n                : \"\"\n              : selectedAnswer === \"X\"\n              ? \"selected\"\n              : \"\"\n          }\n          onClick={() => handleAnswerClick(\"X\")}\n        >\n          X\n        </AnswerButton>\n      </ButtonGroup>\n\n      {!showResult && availableQuestions.length > 1 && (\n        <SkipButton onClick={handleSkipClick}>Skip</SkipButton>\n      )}\n\n      {showResult && (\n        <>\n          <ResultContainer>\n            <ResultText>정답: {currentQuestion.correctAnswer}</ResultText>\n            <ExplanationText>{currentQuestion.explanation}</ExplanationText>\n          </ResultContainer>\n          <NextButton onClick={handleNextClick}>\n            {availableQuestions.length > 1 ? \"다음 문제\" : \"결과 보기\"}\n          </NextButton>\n        </>\n      )}\n    </QuizContainer>\n  );\n};\n\nexport default Quiz;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,MAAMC,aAAa,GAAGL,MAAM,CAACM,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GATIF,aAAa;AAWnB,MAAMG,YAAY,GAAGR,MAAM,CAACS,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAPIF,YAAY;AASlB,MAAMG,YAAY,GAAGX,MAAM,CAACM,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACM,GAAA,GAVID,YAAY;AAYlB,MAAME,YAAY,GAAGb,MAAM,CAACS,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACK,GAAA,GAPID,YAAY;AASlB,MAAME,WAAW,GAAGf,MAAM,CAACM,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACU,GAAA,GATID,WAAW;AAWjB,MAAME,YAAY,GAAGjB,MAAM,CAACkB,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GA3BIF,YAAY;AA6BlB,MAAMG,UAAU,GAAGpB,MAAM,CAACkB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAbID,UAAU;AAehB,MAAME,UAAU,GAAGtB,MAAM,CAACkB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACK,GAAA,GAfID,UAAU;AAiBhB,MAAME,eAAe,GAAGxB,MAAM,CAACM,GAAG;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}