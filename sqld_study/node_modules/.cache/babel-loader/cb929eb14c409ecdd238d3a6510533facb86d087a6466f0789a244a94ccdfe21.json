{"ast":null,"code":"var _jsxFileName = \"/Users/jun/Desktop/sqld_study/src/components/mock_test/MockTestTimer.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TimerContainer = styled.div`\n  font-family: 'IBM Plex Sans', sans-serif;\n  font-size: 18px;\n  font-weight: 700;\n  color: ${props => props.isLow ? '#ff4d4d' : '#d7dfe5'};\n  background-color: rgba(215, 223, 228, 0.08);\n  padding: 10px 16px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: ${props => props.isLow ? 'pulse 1s infinite' : 'none'};\n  box-shadow: ${props => props.isLow ? '0 0 10px rgba(255, 77, 77, 0.5)' : 'none'};\n\n  @keyframes pulse {\n    0% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.7;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n  \n  @media (max-width: 768px) {\n    font-size: 14px;\n    padding: 6px 10px;\n    \n    /* MobileTopBar에서 사용되는 경우 */\n    ${props => props.isTopBar && `\n      background-color: rgba(35, 149, 233, 0.4);\n      font-size: 13px;\n      padding: 5px 8px;\n    `}\n  }\n`;\n\n// 모바일 타이머 디스플레이는 사이드바 전용으로 변경 (MobileTopBar와 중복을 피하기 위함)\n_c = TimerContainer;\nconst MobileTimerDisplay = styled.div`\n  display: none;\n  \n  @media (max-width: 768px) {\n    display: ${props => props.sidebarVisible ? 'flex' : 'none'};\n    position: fixed;\n    top: 10px;\n    right: 10px;\n    z-index: 50;\n    font-family: 'IBM Plex Sans', sans-serif;\n    font-size: 14px;\n    font-weight: 700;\n    color: ${props => props.isLow ? '#ff4d4d' : '#d7dfe5'};\n    background-color: rgba(35, 149, 233, 0.6);\n    padding: 6px 10px;\n    border-radius: 6px;\n    align-items: center;\n    justify-content: center;\n    animation: ${props => props.isLow ? 'pulse 1s infinite' : 'none'};\n    box-shadow: ${props => props.isLow ? '0 0 10px rgba(255, 77, 77, 0.5)' : 'none'};\n  }\n`;\n_c2 = MobileTimerDisplay;\nconst MockTestTimer = ({\n  timeLeft,\n  isTopBar,\n  sidebarVisible\n}) => {\n  // 남은 시간을 시:분:초 형태로 변환\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // 모바일용 타이머 포맷 (분:초 또는 시:분:초)\n  const formatMobileTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // 5분 이하일 때 경고 표시\n  const isTimeRunningLow = timeLeft <= 300;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TimerContainer, {\n      isLow: isTimeRunningLow,\n      isTopBar: isTopBar,\n      children: isTopBar ? formatMobileTime(timeLeft) : formatTime(timeLeft)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MobileTimerDisplay, {\n      isLow: isTimeRunningLow,\n      sidebarVisible: sidebarVisible,\n      children: formatMobileTime(timeLeft)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c3 = MockTestTimer;\nexport default MockTestTimer;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TimerContainer\");\n$RefreshReg$(_c2, \"MobileTimerDisplay\");\n$RefreshReg$(_c3, \"MockTestTimer\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","TimerContainer","div","props","isLow","isTopBar","_c","MobileTimerDisplay","sidebarVisible","_c2","MockTestTimer","timeLeft","formatTime","seconds","hours","Math","floor","minutes","secs","toString","padStart","formatMobileTime","isTimeRunningLow","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/jun/Desktop/sqld_study/src/components/mock_test/MockTestTimer.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TimerContainer = styled.div`\n  font-family: 'IBM Plex Sans', sans-serif;\n  font-size: 18px;\n  font-weight: 700;\n  color: ${props => props.isLow ? '#ff4d4d' : '#d7dfe5'};\n  background-color: rgba(215, 223, 228, 0.08);\n  padding: 10px 16px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: ${props => props.isLow ? 'pulse 1s infinite' : 'none'};\n  box-shadow: ${props => props.isLow ? '0 0 10px rgba(255, 77, 77, 0.5)' : 'none'};\n\n  @keyframes pulse {\n    0% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.7;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n  \n  @media (max-width: 768px) {\n    font-size: 14px;\n    padding: 6px 10px;\n    \n    /* MobileTopBar에서 사용되는 경우 */\n    ${props => props.isTopBar && `\n      background-color: rgba(35, 149, 233, 0.4);\n      font-size: 13px;\n      padding: 5px 8px;\n    `}\n  }\n`;\n\n// 모바일 타이머 디스플레이는 사이드바 전용으로 변경 (MobileTopBar와 중복을 피하기 위함)\nconst MobileTimerDisplay = styled.div`\n  display: none;\n  \n  @media (max-width: 768px) {\n    display: ${props => props.sidebarVisible ? 'flex' : 'none'};\n    position: fixed;\n    top: 10px;\n    right: 10px;\n    z-index: 50;\n    font-family: 'IBM Plex Sans', sans-serif;\n    font-size: 14px;\n    font-weight: 700;\n    color: ${props => props.isLow ? '#ff4d4d' : '#d7dfe5'};\n    background-color: rgba(35, 149, 233, 0.6);\n    padding: 6px 10px;\n    border-radius: 6px;\n    align-items: center;\n    justify-content: center;\n    animation: ${props => props.isLow ? 'pulse 1s infinite' : 'none'};\n    box-shadow: ${props => props.isLow ? '0 0 10px rgba(255, 77, 77, 0.5)' : 'none'};\n  }\n`;\n\nconst MockTestTimer = ({ timeLeft, isTopBar, sidebarVisible }) => {\n  // 남은 시간을 시:분:초 형태로 변환\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // 모바일용 타이머 포맷 (분:초 또는 시:분:초)\n  const formatMobileTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // 5분 이하일 때 경고 표시\n  const isTimeRunningLow = timeLeft <= 300;\n\n  return (\n    <>\n      <TimerContainer isLow={isTimeRunningLow} isTopBar={isTopBar}>\n        {isTopBar ? formatMobileTime(timeLeft) : formatTime(timeLeft)}\n      </TimerContainer>\n      \n      <MobileTimerDisplay isLow={isTimeRunningLow} sidebarVisible={sidebarVisible}>\n        {formatMobileTime(timeLeft)}\n      </MobileTimerDisplay>\n    </>\n  );\n};\n\nexport default MockTestTimer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}